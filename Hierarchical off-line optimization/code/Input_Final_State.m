function S_Final = Input_Final_State(Carriers)
% 输入目标状态，包括各个最终的状态估计的方差，以及各个状态估计的数据被分别被哪些载体知晓
    Num = Find_Number_of_Carrier(Carriers);
    C1 = zeros(1,Num);
    C2 = zeros(1,Num);
    S = num2str(Num);
    S_ = [S,'*',S];
    S = ['(',S,'*','3)','*','(',S,'*','3)'];
    S_Final = cell(1,6);
    S_Final{1,4} = {};
    S_Final{1,5} = {};
    disp("___________________________________________________________________")
    disp("接下来请输入最终状态要求")
    fprintf('请输入一个%3s的矩阵，来表示最终对各个状态估计方差和协方差的要求\n',S)
    P = input("若对某元素有要求，则直接输入，无要求则输入NaN：");
    disp("___________________________________________________________________")
    disp("接下来请输入最终各个状态估计的数据被分别被哪些载体知晓")
    fprintf('请输入一个%3s的矩阵，来表示最终各个状态估计的数据被分别被哪些载体知晓\n',S_)
    X = input("若载体i的状态估计被载体j知晓，则第i行j列输入1，无要求则输入0或者NaN：");
    S_Final{1,1} = P;
    S_Final{1,2} = X;
    for i = 1:Num
        C1(1,i) = Carriers{i,2}{1,2};
        C2(1,i) = Carriers{i,3}{1,2};
    end
    S_Final{1,3}{1,1} = C1;
    S_Final{1,3}{1,2} = C2;
    disp("___________________________________________________________________")
    fprintf('接下来请输入每个载体上的最终状态要求，请输入%1d个矩阵\n',Num)
    P_All_ = cell(1,Num);
    for i = 1:Num
        fprintf("首先是第%1d个矩阵\n",i)
        fprintf("对应的是载体%1d\n",i)
        fprintf('请输入一个%3s的矩阵，来表示最终该载体上对各个状态估计方差和协方差的要求\n',S)
        P_ = input("若对某元素有要求，则直接输入，无要求则输入NaN：");
        P_All_{1,i} = P_;
    end
    S_Final{1,6} = P_All_;
    P__ = Sort_Out_Best_from_all_P_Trace(P_All_);
    Flag = Check_The_Input_P(S_Final{1,1},P__);  % 检查一下，每一个载体的P和总的要求的P有没有冲突，这里主要检查把载体最好的P集合起来能不能符合总的P的要求，符合为1不符合为0
    if Flag
        disp("___________________________________________________________________")
        disp("单独的每一个载体的性能要求符合总的性能要求，没有冲突，这组数据可行")
    else
        disp("___________________________________________________________________")
        disp("单独的每一个载体的性能要求不完全符合总的性能要求，出现了冲突，这组数据需要进一步检查")
    end
    save S_Final_ S_Final;
end